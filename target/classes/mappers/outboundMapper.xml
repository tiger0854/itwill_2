<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.ddosirak.mapper.outboundMapper">
  
 	<!-- 가져올 VO객체 정보 매핑 -->
	<resultMap type="com.ddosirak.domain.OutboundVO" id="outbound">
		<result property="out_id" column="out_id"/>
		<result property="out_empCd" column="out_empCd"/>
		<result property="item_code" column="item_code"/>
		<result property="out_notes" column="out_notes"/>
		<result property="out_Cqty" column="out_Cqty"/>
		<result property="price" column="price"/>
		<result property="out_date" column="out_date"/>
		<result property="create_date" column="create_date"/>
		
		<result property="out_state" column="out_state"/>
		<result property="due_date" column="due_date"/>
		<result property="out_empNm" column="out_empNm"/>
		<result property="out_num" column="out_num"/>
		<result property="item_name" column="item_name"/>
		<result property="out_customerNm" column="out_customerNm"/>
		<result property="out_qty" column="out_qty"/>
		<result property="re_code" column="re_code"/>
		<collection property="proOrderVO" resultMap="proOrderVO"/>
	</resultMap>
  	
  	<!-- 생산 상품 관리 테이블 -->
	<resultMap type="com.ddosirak.domain.ProOrderVO" id="proOrderVO">
  		<result property="so_code" column="so_code"/>
  		<result property="pQTY" column="pQTY"/>
  	</resultMap>
  	<!-- 생산 상품 관리 테이블 -->
	
  	
  	<!-- 재고 리스트 -->
	<select id="getStockList" resultType="com.ddosirak.domain.OutboundVO" resultMap="outbound"> 
		select o.out_state, o.due_date, o.out_empNm, o.out_num, o.item_name, o.out_customerNm, o.out_qty, o.re_code, p.so_code, p.pQTY, o.out_notes
		from outbound o join prod p
		where o.out_num=#{out_num} 
	</select>
  	<!-- 재고 리스트 -->
  	

  	<!-- 출고 등록 -->
	<insert id="outInsert">
		insert into outbound (out_num,out_customerNm,out_empCd,out_empNm,item_code,item_name,out_notes,out_qty,price,due_date,create_date,re_code) 
		SELECT CONCAT('OUT', REPLACE(current_date(), '-', ''), ifnull(MAX(out_id)+1, 1)),#{out_customerNm},#{out_empCd},#{out_empNm},#{item_code},#{item_name},#{out_notes},#{out_qty},#{price},#{due_date},now(),#{re_code}
		from outbound
	</insert>
  	<!-- 출고 등록 -->


  	<!-- 출고 리스트 -->
<!--   	<select id="outList" resultType="com.ddosirak.domain.OutboundVO" parameterType="map"> -->
<!--   		select  -->
<!--   			* -->
<!-- 		from outbound  -->
<!-- 		where -->
<!-- 			1=1 -->
<!-- 		<if test="state != null"> -->
<!-- 			and out_state = #{state} -->
<!-- 		</if> -->
<!-- 		<if test="pageVO.search != null"> -->
<!-- 			and out_num like CONCAT('%',#{pageVO.search},'%') -->
<!-- 		</if> -->
<!-- 		order by out_id desc -->
<!-- 		limit #{pageVO.startRow}, #{pageVO.pageSize} -->
<!--   	</select> -->
<select id="outList" resultType="com.ddosirak.domain.OutboundVO" parameterType="map" resultMap="outbound">
  		select o.out_date, o.create_date, o.out_id, o.out_state, o.due_date, o.out_empCd, o.out_empNm, o.out_num, o.item_code, o.item_name, o.out_customerNm,o.out_Cqty, o.out_qty, o.re_code, p.so_code, p.pQTY, o.out_notes, o.price
		from outbound o join prod p
		<choose>
  				<when test="state == 'all'">AND o.out_state >= 0</when>
  				<when test="state == 'ongoing'">AND o.out_state = 1</when>
  				<when test="state == 'completed'">AND o.out_state = 0</when>
  		</choose>
		order by o.out_id desc
  	</select>
  	<!-- 출고 리스트 --> 
  	

	<!-- 출고 상태 업데이트 (진행중, 출고 완료) -->
	<update id="updateOutState" parameterType="map">
        update outbound
        set out_state = #{out_state}
        where out_num = #{out_num}
    </update>
	<!-- 출고 상태 업데이트 (진행중, 출고 완료) -->
	 
 	
  	<!-- 출고번호에 따른 출고 상품 리스트 -->
  	<select id="outProductList" resultType="com.ddosirak.domain.OutboundVO">
  		select *
		from outbound
		where out_num=#{out_num}
  	</select>
  	<!-- 출고번호에 따른 출고 상품 리스트 -->
  	
  	<!-- 상품 이름 외 n건 -->
  	<select id="getOutNumCount" parameterType="string" resultType="int">
  	  select count(out_num) 
  	  from outbound 
  	  where out_num = #{out_num}
	</select>
  	
  	<!-- 출고 수정 -->
  	<update id="outboundUpdate">	
  		update outbound set out_qty = #{out_qty}, due_date = #{due_date}, out_notes = #{out_notes}
  		where out_num=#{out_num}
  	</update>
  	<!-- 출고 수정 -->
  	
  	<!-- 출고 삭제 -->
  	<delete id="outboundDelete">
  		delete from outbound where out_num = #{out_num}
  	</delete>
  	<!-- 출고 삭제 -->
  	
  	<!-- 출고 처리 -->
  	<update id="outProcessModify">
  		update outbound set out_Cqty = #{out_Cqty}, out_date = #{out_date} , out_state = 0
  		where out_num = #{out_num}
  	</update>
  	<!-- 출고 처리 -->
  	
  	
  	<!-- rec_code -->
	<select id="recCd" resultType="string">
		 select re_code 
		 from outbound 
		 where out_num = #{out_num}
	</select>
  	<!-- rec_code -->
  	
	<!-- 수주 상태 수정(0) -->
	<update id="recStateUpdate" >
		update receive
		set re_state=0
		where re_code=#{re_code}
	</update>
  	<!-- 수주 상태 수정 -->


	<!-- 수주 상태 수정(2) -->
	<update id="recStateUpdate2" >
		update receive
		set re_state=2
		where re_code=#{re_code}
	</update>
  	<!-- 수주 상태 수정 -->
  	
  
  	<!-- 출고 현황 그래프 -->
<!--   	<select id="outGrp" resultType="com.ddosirak.domain.OutboundVO"> -->
<!--   		select item_name, count(*) as count -->
<!--   		from outbound -->
<!--   		where  date(out_date) = curdate() -->
<!-- 		group by item_name -->
<!--   	</select> -->
  	<!-- 출고 현황 그래프 -->

  	
  	<!-- 당일 출고 완료 그래프 -->
  	<select id="outCompleteToday" resultType="Integer">
  		SELECT COUNT(*) 
		FROM outbound
		WHERE DATE(out_date) = CURDATE();
  	</select>
  	<!-- 당일 출고 완료 그래프 -->
  	
  	<!-- 당일 출고 예정 그래프 -->
  	<select id="outScheduleToday" resultType="Integer">
  		SELECT COUNT(*) 
		FROM outbound
		WHERE DATE(due_date) = CURDATE();
  	</select>
  	<!-- 당일 출고 예정 그래프 -->
  
  </mapper>